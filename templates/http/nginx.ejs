#
# Default NGINX HTTP Proxy configuration template.
# TODO: document
# 
# Start with some global options.
daemon off;
error_log stderr error;
pid <%- dirs.base %>/nginx.pid;
worker_processes auto;

events {
  worker_connections 1024;
}


# Configure the HTTP context for all the apps and the API.
http {
  # You can't tell nginx to log to stdout and /dev/stdout is not
  # working (because it is a pipe to nodejs?).
  access_log <%- dirs.base %>/access.log;

  sendfile    off;
  tcp_nopush  on;
  tcp_nodelay on;

  keepalive_timeout 5 5;
  types_hash_max_size 2048;

  # Bump up the server_name hash sizes as we expect many names.
  # NGINX optimises maps up to the limit so in most cases this is fine.
  # If the limits are still too low uses can always use custom templates.
  server_names_hash_bucket_size 256;
  server_names_hash_max_size 1024;

  # Override paths so that nginx can run as non-root.
  client_body_temp_path <%- dirs.base %>/tmp/client_body;
  fastcgi_temp_path <%- dirs.base %>/tmp/fastcgi;
  proxy_temp_path <%- dirs.base %>/tmp/proxy;
  scgi_temp_path  <%- dirs.base %>/tmp/scgi;
  uwsgi_temp_path <%- dirs.base %>/tmp/uwsgi;

  # Enable support for websocket connections.
  # See: http://nginx.org/en/docs/http/websocket.html
  map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
  }

  # Hardening options.
  add_header X-Frame-Options SAMEORIGIN;
  add_header X-Content-Type-Options nosniff;
  add_header X-XSS-Protection "1; mode=block";

  client_body_buffer_size 1k;
  client_body_timeout 10;
  client_header_buffer_size 1k;
  client_header_timeout 10;
  large_client_header_buffers 2 1k;
  send_timeout 10;
  server_tokens off;

  # The connection limit below is very restrictive and won't work if a LB is used.
  #limit_conn default 5;
  #limit_conn_zone $binary_remote_addr zone=default:10m;

  <% if (proxy.hsts.age > 0) { %>
  # Add HSTS Header.
  add_header Strict-Transport-Security max-age=<%- proxy.hsts.age %>; includeSubDomains;
  <% } %>

  # Global SSL configuration.
  # Based on Mozilla Server Side TLS Config (modern).
  # https://mozilla.github.io/server-side-tls/ssl-config-generator/
  <% if (proxy.tls.terminate) { %>
  ssl_certificate     <%- proxy.tls.crt_file %>;
  ssl_certificate_key <%- proxy.tls.key_file %>;
  ssl_session_timeout 1d;
  ssl_session_cache   shared:SSL:50m;
  ssl_session_tickets off;

  ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
  ssl_prefer_server_ciphers on;
  ssl_protocols TLSv1.2;

  # OCSP Stapling
  ssl_stapling on;
  ssl_stapling_verify on;
  <% } %>

  # Configure AuthGateway site.
  upstream authgateway_auth {
    server <%- auth.host %>:<%- auth.port %>;
  }
  upstream authgateway_backend {
    server <%- gateway.host %>:<%- gateway.port %>;
  }
  server {
    # HTTPS is required but allow optional TLS termination here
    # so that termination can be performed on load blanacers.
    <% if (proxy.tls.terminate) { %>
    listen <%- proxy.bind.port %> default_server ssl http2;
    server_name <%- gateway.domain %>;
    <% } else { %>
    listen <%- proxy.bind.port %> default_server;
    server_name <%- gateway.domain %>;
    <% } %>

    types {
      text/css	css;
      application/javascript js;
    }

    location / {
      proxy_pass http://authgateway_backend;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location /api/proxied {
      proxy_pass http://authgateway_auth;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location /<%- auth.prefix %> {
      proxy_pass http://authgateway_auth;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location /static {
      root <%- dirs.static %>/..;
    }

    location = /robots.txt {
      access_log off;
      add_header Content-Type text/plain;
      return 200 "User-agent: *\nDisallow: /\n";
    }
  }

  # Configure upstreams and servers for protected apps.
  <% apps.upstreams.forEach(function(app) { %>
  upstream <%- app.id %>_upstream {
    server <%- app.upstream.host %>;
  }
  server {
    # HTTPS is required but allow optional TLS termination here
    # so that termination can be performed on load blanacers.
    <% if (proxy.tls.terminate) { %>
    listen <%- proxy.bind.port %> ssl http2;
    server_name <%- app.upstream.subdomain %>.<%- gateway.domain %>;
    <% } else { %>
    listen <%- proxy.bind.port %>;
    server_name <%- app.upstream.subdomain %>.<%- gateway.domain %>;
    <% } %>

    # Advanced proxy options.
    <% if (app.options.client_max_body_size) { -%>
    client_max_body_size <%- app.options.client_max_body_size %>;
    <% } -%>

    location / {
      proxy_pass <%- app.upstream.protocol %>://<%- app.id %>_upstream;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      auth_request /__<%- auth.prefix %>__;
      error_page 401 = https://<%- gateway.domain %>:<%- proxy.bind.port %>/;

      # Support websocket connections.
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
    }

    location /__<%- auth.prefix %>__ {
      internal;
      proxy_pass http://authgateway_backend/api/auth;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Original-URI $request_uri;
    }

    location = /robots.txt {
      access_log off;
      add_header Content-Type text/plain;
      return 200 "User-agent: *\nDisallow: /\n";
    }
  }
  <% }); %>

  # Configure upstreams and servers for audited apps.
  <% apps.audited.forEach(function(app) { %>
  upstream <%- app.id %>_upstream {
    server <%- app.audit.host %>;
  }
  server {
    # HTTPS is required but allow optional TLS termination here
    # so that termination can be performed on load blanacers.
    <% if (proxy.tls.terminate) { %>
    listen <%- proxy.bind.port %> ssl http2;
    server_name <%- app.audit.server_name %>;
    <% } else { %>
    listen <%- proxy.bind.port %>;
    server_name <%- app.audit.server_name %>;
    <% } %>

    location / {
      proxy_pass <%- app.audit.protocol %>://<%- app.id %>_upstream;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      auth_request /__<%- auth.prefix %>__;
      error_page 401 = https://<%- gateway.domain %>:<%- proxy.bind.port %>/;

      # Support websocket connections.
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
    }

    location /__<%- auth.prefix %>__ {
      internal;
      proxy_pass http://authgateway_backend/api/audit;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Original-URI $request_uri;
    }

    location = /robots.txt {
      access_log off;
      add_header Content-Type text/plain;
      return 200 "User-agent: *\nDisallow: /\n";
    }
  }
  <% }); %>
}
