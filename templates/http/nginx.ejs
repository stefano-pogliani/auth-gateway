#
# Default NGINX HTTP Proxy configuration template.
# TODO: document
# 
# Start with some global options.
daemon off;
error_log stderr error;
pid <%- dirs.base %>/nginx.pid;
worker_processes auto;

events {
  worker_connections 1024;
}


# Configure the HTTP context for all the apps and the API.
http {
  # You can't tell nginx to log to stdout and /dev/stdout is not
  # working (because it is a pipe to nodejs?).
  access_log syslog:server=unix:/dev/log;

  sendfile    off;
  tcp_nopush  on;
  tcp_nodelay on;

  keepalive_timeout   65;
  types_hash_max_size 2048;

  # Override paths so that nginx can run as non-root.
  client_body_temp_path <%- dirs.base %>/tmp/client_body;
  fastcgi_temp_path <%- dirs.base %>/tmp/fastcgi;
  proxy_temp_path <%- dirs.base %>/tmp/proxy;
  scgi_temp_path  <%- dirs.base %>/tmp/scgi;
  uwsgi_temp_path <%- dirs.base %>/tmp/uwsgi;


  # Configure AuthGateway site.
  upstream authgateway_auth {
    server <%- auth.host %>:<%- auth.port %>;
  }
  upstream authgateway_backend {
    server <%- gateway.host %>:<%- gateway.port %>;
  }
  server {
    # HTTPS is required but allow optional TLS termination here
    # so that termination can be performed on load blanacers.
    <% if (proxy.tls.terminate) { %>
    listen <%- proxy.bind.port %> ssl;
    server_name <%- gateway.domain %>;
    ssl_certificate     <%- proxy.tls.crt_file %>;
    ssl_certificate_key <%- proxy.tls.key_file %>;
    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers         HIGH:!aNULL:!MD5;
    <% } else { %>
    listen <%- proxy.bind.port %>;
    server_name <%- gateway.domain %>;
    <% } %>

    types {
      text/css	css;
      application/javascript js;
    }

    location / {
      proxy_pass http://authgateway_backend;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location /api/proxied {
      proxy_pass http://authgateway_auth;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location /<%- auth.prefix %> {
      proxy_pass http://authgateway_auth;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location /static {
      root <%- dirs.static %>/..;
    }
  }

  # Configure upstreams and servers for apps.
  <% apps.forEach(function(app) { %>
  upstream <%- app.upstream.subdomain %>_upstream {
    server <%- app.upstream.host %>;
  }
  server {
    # HTTPS is required but allow optional TLS termination here
    # so that termination can be performed on load blanacers.
    <% if (proxy.tls.terminate) { %>
    listen <%- proxy.bind.port %> ssl;
    server_name <%- app.upstream.subdomain %>.<%- gateway.domain %>;
    ssl_certificate     <%- proxy.tls.crt_file %>;
    ssl_certificate_key <%- proxy.tls.key_file %>;
    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers         HIGH:!aNULL:!MD5;
    <% } else { %>
    listen <%- proxy.bind.port %>;
    server_name <%- app.upstream.subdomain %>.<%- gateway.domain %>;
    <% } %>

    location / {
      proxy_pass <%- app.upstream.protocol %>://<%- app.upstream.subdomain %>_upstream;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      auth_request /__<%- auth.prefix %>__;
      #error_page 401 = https://<%- gateway.domain %>:<%- proxy.bind.port %>/;
    }

    location /__<%- auth.prefix %>__ {
      internal;
      proxy_pass http://authgateway_backend/api/auth;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Original-URI $request_uri;
    }
  }
  <% }); %>
}
